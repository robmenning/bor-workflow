# BOR Workflows Documentation

This document describes the workflows implemented by the bor-workflow service.

## Overview

The bor-workflow service provides automated data processing workflows using the Prefect orchestration engine. All workflows are containerized and run within the bor-network Docker network.

## Available Workflows

### 1. Mellon Holdings ETL (`mellon_holdings_etl.py`)

**Purpose**: Processes Mellon holdings data files and integrates them into the database.

**Steps**:
1. **File Discovery**: Scans `/var/lib/mysql-files/ftpetl/incoming/` for Mellon CSV files
2. **File Processing**: Processes each file using LOAD DATA INFILE
3. **Data Validation**: Validates processed data
4. **Integration**: Executes `usp_mellon_hold_integrate` stored procedure in `bormeta` database

**Parameters**:
- `date_valid`: Date for processing (YYYY-MM-DD format)
- `file_pattern`: Pattern to match files (default: "mellon-*.csv")

**Output**: Processed data in `borarch` database tables

### 2. Factset Out Holdings (`factset_out_hold.py`)

**Purpose**: Retrieves holdings data from bor-api and produces output files for external consumption.

**Steps**:
1. **Data Retrieval**: Fetches holdings data from bor-api with JWT authentication
2. **File Generation**: Creates delimited output files in `/var/lib/mysql-files/ftpetl/outgoing/`

**Parameters**:
- `date_valid`: Date for data retrieval (YYYY-MM-DD format)
- `port_id`: Optional portfolio ID filter
- `file_name`: Output filename (auto-generated if not provided)
- `delimiter`: Field delimiter (default: "|")
- `api_host`: bor-api hostname (default: "bor-api")
- `api_port`: bor-api port (default: "4410" for dev, "4610" for prod)

**Output**: Delimited text file with holdings data

## JWT Authentication

### Overview

All workflows that interact with bor-api use JWT authentication as specified by the bor-api team. The authentication system matches the exact requirements used by bor-app and bor-api.

### JWT Token Structure

The JWT payload follows the bor-api specification:

```json
{
  "id": "workflow-service",
  "name": "BOR Workflow Service",
  "email": "workflow-service@bor-system.com",
  "borUserId": 999,
  "roleIds": ["dataadmin"],
  "permissionIds": ["port:read", "instr:read"],
  "isApproved": true,
  "iat": 1625097600,
  "exp": 1625184000
}
```

### Required Environment Variables

- `NEXTAUTH_SECRET`: JWT secret (must match bor-api configuration)
- `BOR_API_TOKEN`: Optional pre-generated service token

### Authentication Flow

1. **Token Generation**: Workflow generates JWT token using `NEXTAUTH_SECRET`
2. **Token Validation**: bor-api validates token signature and expiration
3. **Authorization**: bor-api checks `roleIds` and `isApproved` status
4. **API Access**: Workflow accesses protected endpoints with valid token

### Service Account Approach

The workflow service uses a dedicated service account with:
- **Role**: `dataadmin` (required for data access)
- **Permissions**: `port:read`, `instr:read` (minimum required)
- **Approval**: `isApproved: true` (required for all requests)

## External Integration

### bor-api Integration

**Authentication**: JWT tokens with `dataadmin` role required
**Endpoints**: 
- `GET /data/factset-holdings` - Retrieve holdings data
- Parameters: `dateValId`, `portId` (optional)

**Error Handling**:
- 401 Unauthorized: Invalid or missing JWT token
- 403 Forbidden: Insufficient permissions or unapproved account
- 404 Not Found: Endpoint or data not available

### File System Integration

**Input Directory**: `/var/lib/mysql-files/ftpetl/incoming/`
**Output Directory**: `/var/lib/mysql-files/ftpetl/outgoing/`
**Shared Volume**: `bor-files-data` (persistent across container restarts)

### Database Integration

**MySQL Connection**: Direct connection to `bor-db` container
**Stored Procedures**: Execute integration procedures in `bormeta` database
**Data Persistence**: All processed data stored in `borarch` database

## Deployment and Execution

### Prefect Deployments

All workflows are deployed as Prefect deployments with environment-specific configurations:

```yaml
# Example deployment configuration
name: "Factset Out Holdings"
entrypoint: "src/workflows/factset_out_hold.py:factset_out_hold_flow"
parameters:
  date_valid: "2025-04-14"
  api_port: "{{ $API_PORT }}"
  delimiter: "|"
```

### Environment Configuration

**Development**:
- API Port: 4410
- Authentication: JWT with `SKIP_AUTH_FOR_TESTS=false`
- Database: Local bor-db container

**Production**:
- API Port: 4610
- Authentication: JWT with full validation
- Database: Production bor-db container

### Execution Methods

1. **Prefect UI**: Manual execution through web interface
2. **CLI**: `prefect deployment run 'workflow-name'`
3. **API**: REST API calls to Prefect server
4. **Scheduled**: Automated execution via Prefect schedules

## Monitoring and Logging

### Log Sources

1. **Prefect UI**: Flow run logs and task execution details
2. **Container Logs**: `docker logs bor-workflow` and `docker logs bor-etl-agent`
3. **File System**: Output files in `/var/lib/mysql-files/ftpetl/outgoing/`

### Error Handling

- **Authentication Errors**: JWT token validation failures
- **API Errors**: bor-api connection or response errors
- **File System Errors**: Permission or disk space issues
- **Database Errors**: Connection or query execution failures

### Debugging

1. **Check Container Status**: `docker ps` and `docker logs`
2. **Verify Environment**: Check `.env` files and environment variables
3. **Test Authentication**: Use JWT test utilities
4. **Validate API Access**: Test bor-api endpoints directly

## Security Considerations

### JWT Token Management

- **Secret Security**: `NEXTAUTH_SECRET` must be kept secure
- **Token Expiration**: Tokens expire after 30 days by default
- **Token Rotation**: Service tokens should be rotated periodically
- **Environment Isolation**: Different secrets for dev/prod environments

### Network Security

- **Docker Network**: All containers communicate via `bor-network`
- **Port Mapping**: External ports mapped to internal container ports
- **Service Discovery**: Container names used for internal communication

### Data Security

- **File Permissions**: Output files have appropriate permissions
- **Database Access**: Limited database user permissions
- **API Authentication**: All API calls require valid JWT tokens

## Troubleshooting

### Common Issues

1. **"Authentication required"**: Missing or invalid JWT token
2. **"Connection refused"**: bor-api not running or wrong port
3. **"File not found"**: Input files missing or wrong path
4. **"Permission denied"**: File system or database permission issues

### Resolution Steps

1. **Verify Environment**: Check all required environment variables
2. **Test Connectivity**: Verify container network communication
3. **Check Logs**: Review Prefect and container logs for errors
4. **Validate Configuration**: Ensure deployment parameters are correct

## Future Enhancements

### Planned Features

1. **Additional Workflows**: More ETL and data processing workflows
2. **Enhanced Monitoring**: Integration with external monitoring systems
3. **Advanced Scheduling**: Complex scheduling and dependency management
4. **Data Validation**: Comprehensive data quality checks

### Integration Opportunities

1. **External APIs**: Integration with additional data sources
2. **Notification Systems**: Email/SMS alerts for workflow completion
3. **Data Warehousing**: Integration with data warehouse systems
4. **Reporting**: Automated report generation and distribution